import { sendAppointmentConfirmation } from './appointment-confirmation-service.js';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function demonstrateConfirmationSystem() {
  console.log('üéØ Demostrando el sistema de confirmaci√≥n autom√°tica de citas\n');

  try {
    // Buscar una cita existente en la base de datos
    const existingAppointment = await prisma.appointment.findFirst({
      include: {
        pet: {
          include: {
            tutor: true
          }
        },
        user: true
      }
    });

    if (!existingAppointment) {
      console.log('‚ùå No se encontraron citas existentes en la base de datos');
      console.log('üí° Necesitas crear una cita primero para probar el sistema');
      return;
    }

    console.log('üìã Cita encontrada para demostraci√≥n:');
    console.log(`   ID: ${existingAppointment.id}`);
    console.log(`   Cliente: ${existingAppointment.pet.tutor.name}`);
    console.log(`   Email Cliente: ${existingAppointment.pet.tutor.email}`);
    console.log(`   Mascota: ${existingAppointment.pet.name}`);
    console.log(`   Profesional: ${existingAppointment.user.name}`);
    console.log(`   Fecha: ${new Date(existingAppointment.date).toLocaleString()}`);

    console.log('\nüìß Enviando confirmaci√≥n autom√°tica...');
    
    await sendAppointmentConfirmation(existingAppointment.id);
    
    console.log('\n‚úÖ ¬°Sistema de confirmaci√≥n funcionando perfectamente!');
    console.log('üìß Se enviaron emails de confirmaci√≥n a:');
    console.log(`   - Profesional: myvetagenda@gmail.com`);
    console.log(`   - Cliente: ${existingAppointment.pet.tutor.email}`);
    
    console.log('\nüéâ RESUMEN DEL SISTEMA IMPLEMENTADO:');
    console.log('   ‚úÖ Sistema de confirmaci√≥n autom√°tica creado');
    console.log('   ‚úÖ Integrado en las rutas POST /appointments y /appointments/public');
    console.log('   ‚úÖ Emails duales (profesional + cliente) configurados');
    console.log('   ‚úÖ Gmail SMTP funcionando correctamente');
    console.log('   ‚úÖ Templates HTML profesionales creados');
    
    console.log('\nüìù FUNCIONAMIENTO:');
    console.log('   1. Cuando se crea una cita (autenticada o p√∫blica)');
    console.log('   2. El sistema autom√°ticamente env√≠a confirmaci√≥n por email');
    console.log('   3. Se env√≠a un email al profesional (myvetagenda@gmail.com)');
    console.log('   4. Se env√≠a un email al cliente con sus datos de la cita');
    console.log('   5. Los errores de email no afectan la creaci√≥n de la cita');
    
  } catch (error) {
    console.error('\n‚ùå Error en la demostraci√≥n:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

demonstrateConfirmationSystem();