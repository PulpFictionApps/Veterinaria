datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  fullName     String?
  phone        String?
  clinicName   String?
  accountType  String        @default("client")
  createdAt    DateTime      @default(now())
  tutors       Tutor[]
  availability Availability[]
  appointments Appointment[]
  prescriptions Prescription[]
  // Nuevo campo para suscripción simple (MVP)
  isPremium    Boolean       @default(false)
  // Relación con profesionales añadidos a la cuenta
  professionals Professional[]
  // Relación con suscripciones (nuevo modelo)
  subscriptions Subscription[]
}

model Tutor {
  id           Int           @id @default(autoincrement())
  name         String
  email        String?
  phone        String?
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  pets         Pet[]
  appointments Appointment[]
  prescriptions Prescription[]
}

model Pet {
  id           Int           @id @default(autoincrement())
  name         String
  type         String
  breed        String?
  age          Int?
  tutorId      Int
  tutor        Tutor         @relation(fields: [tutorId], references: [id])
  appointments Appointment[]
  medicalRecords MedicalRecord[]
  prescriptions Prescription[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

// Profesionales que pueden ser añadidos a una cuenta
model Professional {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  role      String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Appointment {
  id        Int      @id @default(autoincrement())
  petId     Int
  tutorId   Int
  userId    Int
  date      DateTime
  reason    String
  createdAt DateTime @default(now())

  pet    Pet   @relation(fields: [petId], references: [id])
  tutor  Tutor @relation(fields: [tutorId], references: [id])
  user   User  @relation(fields: [userId], references: [id])
}

model Availability {
  id        Int      @id @default(autoincrement())
  userId    Int
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
  model MedicalRecord {
    id          Int      @id @default(autoincrement())
    petId       Int
    title       String
    content     String
    diagnosis   String?
    treatment   String?
    weight      Float?
    temperature Float?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    pet Pet @relation(fields: [petId], references: [id])
  }

  model Prescription {
    id          Int      @id @default(autoincrement())
    petId       Int
    tutorId     Int
    userId      Int
    title       String
    content     String
    pdfUrl      String?
    sendWhatsApp Boolean @default(false)
    whatsappSent Boolean @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    pet Pet @relation(fields: [petId], references: [id])
    tutor Tutor @relation(fields: [tutorId], references: [id])
    user User @relation(fields: [userId], references: [id])
  }

  model Subscription {
    id         Int      @id @default(autoincrement())
    userId     Int
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    plan       String   @default("basic")
    status     String   @default("active") // active | canceled | past_due
    providerId String?  // id from payment provider
    startedAt  DateTime @default(now())
    expiresAt  DateTime?
    createdAt  DateTime @default(now())
  }
