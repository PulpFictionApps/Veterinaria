datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  fullName     String?
  phone        String?
  clinicName   String?
  accountType  String        @default("client")
  // Campos profesionales para recetas médicas
  professionalRut     String?  // RUT del veterinario
  professionalTitle   String?  // Título profesional (ej: "MÉDICO VETERINARIO")
  clinicAddress      String?  // Dirección de la clínica
  professionalPhone  String?  // Teléfono profesional
  licenseNumber      String?  // Número de colegiatura
  signatureUrl       String?  // URL de la imagen de firma
  logoUrl           String?   // URL del logo de la clínica
  // Campos para automatización y comunicaciones
  whatsappNumber        String?   // Número de WhatsApp para automatización
  autoEmail            String?   // Email para envío automático
  enableWhatsappReminders Boolean @default(false) // Activar recordatorios por WhatsApp
  enableEmailReminders    Boolean @default(false) // Activar recordatorios por Email
  // Campos para personalización de colores
  paletteId            String?   // ID de paleta predeterminada seleccionada
  primaryColor         String?   @default("#EC4899")   // Color primario (rosa por defecto)
  secondaryColor       String?   @default("#F9A8D4")   // Color secundario (rosa claro por defecto)
  accentColor          String?   @default("#BE185D")   // Color de acento (rosa oscuro por defecto)
  // Campos para personalización de emails de confirmación
  appointmentInstructions String?  @default("Llegada: Por favor llega 10-15 minutos antes de tu cita\nDocumentos: Trae la cartilla de vacunación de tu mascota\nAyuno: Si es necesario, te contactaremos para indicar ayuno\nCambios: Si necesitas reprogramar, contáctanos con anticipación") // Instrucciones importantes configurables
  contactEmail         String?   // Email de contacto del profesional (si es diferente al principal)
  contactPhone         String?   // Teléfono de contacto del profesional
  createdAt    DateTime      @default(now())
  tutors       Tutor[]
  availability Availability[]
  appointments Appointment[]
  prescriptions Prescription[]
  consultationTypes ConsultationType[]
  // Nuevo campo para suscripción simple (MVP)
  isPremium    Boolean       @default(false)
  // Relación con profesionales añadidos a la cuenta
  professionals Professional[]
  // Relación con suscripciones (nuevo modelo)
  subscriptions Subscription[]
}

model Tutor {
  id           Int           @id @default(autoincrement())
  name         String
  email        String?
  phone        String?
  rut          String?       // RUT del tutor
  address      String?       // Dirección del tutor
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  pets         Pet[]
  appointments Appointment[]
  prescriptions Prescription[]
}

model Pet {
  id           Int           @id @default(autoincrement())
  name         String
  type         String        // Especie (perro, gato, etc.)
  breed        String?       // Raza
  age          Int?          // Edad en años
  weight       Float?        // Peso actual en kg
  sex          String?       // Sexo (macho, hembra)
  reproductiveStatus String? // Estado reproductivo (Sin intervenciones, Castrado, Esterilizada)
  birthDate    DateTime?     // Fecha de nacimiento aproximada
  tutorId      Int
  tutor        Tutor         @relation(fields: [tutorId], references: [id])
  appointments Appointment[]
  medicalRecords MedicalRecord[]
  prescriptions Prescription[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

// Profesionales que pueden ser añadidos a una cuenta
model Professional {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  role      String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model ConsultationType {
  id           Int           @id @default(autoincrement())
  name         String        // e.g., "Consulta General", "Vacunación", "Cirugía Menor"
  price        Int           // price in cents to avoid floating point issues
  description  String?       // optional description
  duration     Int?          @default(30) // duration in minutes
  color        String?       @default("#3B82F6") // color for calendar/UI
  active       Boolean       @default(true)
  userId       Int           // belongs to professional
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("consultation_types")
}

model Appointment {
  id                 Int              @id @default(autoincrement())
  petId              Int
  tutorId            Int
  userId             Int
  consultationTypeId Int?             // optional reference to consultation type
  date               DateTime
  // status: pending | confirmed | cancelled. Default kept as confirmed for existing flows.
  status             String           @default("confirmed")
  reason             String
  // Campos para recordatorios automáticos
  reminder24hSent    Boolean          @default(false)
  reminder24hSentAt  DateTime?
  reminder1hSent     Boolean          @default(false)  
  reminder1hSentAt   DateTime?
  createdAt          DateTime         @default(now())

  pet                Pet              @relation(fields: [petId], references: [id])
  tutor              Tutor            @relation(fields: [tutorId], references: [id])
  user               User             @relation(fields: [userId], references: [id])
  consultationType   ConsultationType? @relation(fields: [consultationTypeId], references: [id], onDelete: SetNull)
}

model Availability {
  id        Int      @id @default(autoincrement())
  userId    Int
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
  model MedicalRecord {
    id          Int      @id @default(autoincrement())
    petId       Int
    title       String
    content     String
    diagnosis   String?
    treatment   String?
    weight      Float?
    temperature Float?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    pet Pet @relation(fields: [petId], references: [id])
  }

  model Prescription {
    id          Int      @id @default(autoincrement())
    petId       Int
    tutorId     Int
    userId      Int
    title       String   // Título de la receta
    content     String   // Contenido/notas generales
    // Campos específicos para medicamentos
    medication  String   // Nombre del medicamento
    dosage      String   // Dosis (ej: "10mg", "1 comprimido")
    frequency   String   // Frecuencia (ej: "cada 8 horas", "2 veces al día")
    duration    String   // Duración (ej: "7 días", "2 semanas")
    instructions String? // Instrucciones adicionales
    pdfUrl      String?  // URL del PDF generado
    pdfPath     String?  // Ruta local del PDF
    sendWhatsApp Boolean @default(false)
    whatsappSent Boolean @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    pet Pet @relation(fields: [petId], references: [id])
    tutor Tutor @relation(fields: [tutorId], references: [id])
    user User @relation(fields: [userId], references: [id])
  }

  model Subscription {
    id         Int      @id @default(autoincrement())
    userId     Int
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    plan       String   @default("basic")
    status     String   @default("active") // active | canceled | past_due | trial | expired
    providerId String?  // id from payment provider
    startedAt  DateTime @default(now())
    expiresAt  DateTime?
    createdAt  DateTime @default(now())
  }
